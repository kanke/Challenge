(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
angular.module("codingtest.partials",[]).run(["$templateCache",function(e){e.put("expenses-content.html",'<div ng-controller="ctrlExpenses"><h2>Expenses</h2><div bookmarklist="" id="bookmarks" class="section-list"></div><h3>Add an expense</h3><form name="expensesform"><ul><li><label>Date</label> <input type="text" ng-required="true" ng-model="newExpense.date" ui-date="dateOptions" placeholder="dd/mm/yyyy"></li><li><label>Amount</label> <input type="text" ng-required="true" ng-model="newExpense.amount" placeholder="00.00"></li><li><label>Reason</label><div auto-resize-form="" resize-watches="newExpense.reason" resize-sources="textarea" class="auto-resize"><textarea ng-required="true" ng-model="newExpense.reason" ng-trim="false" placeholder="why oh why?"></textarea></div></li><li><label></label> <button ng-click="saveExpense()" class="solid">Save Expense</button> <button ng-click="clearExpense()">cancel</button></li></ul></form><h3>Submitted expenses</h3><div class="list-table expenses-data"><div class="header-row"><div>Date</div><div class="figures">Amount (inc. VAT)</div><div class="figures">Reson</div></div><div ng-repeat="expense in expenses" class="body-row"><div>{{expense.date | date:\'dd MMM yyyy\'}}</div><div class="figures">{{expense.amount | currency:"&pound;"}}</div><div class="figures">{{expense.reason}}</div></div></div></div>')}]);
},{}],2:[function(require,module,exports){
"use strict";

/******************************************************************************************

Alchemytec Coding Test for Expenses Back End

******************************************************************************************/

// App files
require("../shared/app-partials.js");
require("../shared/navigation/navigation-controllers.js");
require("../shared/navigation/navigation-directives.js");
require("../shared/information/version-controller.js");
require("../shared/forms/resize-directives.js");
require("./app-partials.js");
require("./expenses/main.js");

// Declare app level module which depends on filters, and services
var app = angular.module("alcExpenses", [
	"ngRoute",
	"ngAnimate",
	"ngSanitize",
	"restangular",
	"ui.date",
	"alchemytec.directives",
	"alchemytec.filters",
	"alchemytec.animations",
	"shared.partials",
	"codingtest.partials",
	"navigation.directives",
	"navigation.controllers",
	"resize.directives",
	"version.controller",
	"expenses.controllers"
]);

app.config(["$routeProvider", function($routeProvider) {
	// Global routes
	$routeProvider.when("/version", { templateUrl: "version-content.html" });
}]);

app.run(["$rootScope", function($rootScope) {
	// Basic config options
	var gulpBuildConfig = {version: '2.0.0', builddate: new Date(1422368649055)};
	$rootScope.config = angular.extend({ angular: angular.version.full }, gulpBuildConfig);
	
	// Headings used by the menu bars
	$rootScope.mainTitle = "";
	$rootScope.mainHeading = "";
	
	// Sections of content are used for bookmark navigation
	$rootScope.contentSections = [];
	
	// App sections are distinct areas of the website
	// These will ultimately be retrieved from the server
	$rootScope.appSections = $rootScope.appSections || [];
	
	// Initialise tab sections
	$rootScope.tabSections = $rootScope.tabSections || {};
	$rootScope.currentSection = [];
	$rootScope.selectTabSection = function(currentSection, selectedIndex) {
		if ($rootScope.tabSections[currentSection]) {
			$rootScope.currentSection = angular.copy($rootScope.tabSections[currentSection]);
			
			for (var u = 0; u < $rootScope.currentSection.length; u++) {
				if (u == selectedIndex)
					$rootScope.currentSection[u].active = true;
				else
					$rootScope.currentSection[u].active = false;
			}
		}
	};
}]);

// Bootstrap the app
$(document).ready(function() {
	angular.bootstrap("body", ["alcExpenses"]);
});

},{"../shared/app-partials.js":5,"../shared/forms/resize-directives.js":6,"../shared/information/version-controller.js":7,"../shared/navigation/navigation-controllers.js":8,"../shared/navigation/navigation-directives.js":9,"./app-partials.js":1,"./expenses/main.js":4}],3:[function(require,module,exports){
"use strict";

/******************************************************************************************

Expenses controller

******************************************************************************************/

var app = angular.module("expenses.controller", []);

app.controller("ctrlExpenses", ["$rootScope", "$scope", "Restangular", function ExpensesCtrl($rootScope, $scope, $Restangular) {
	// Update the headings
	$rootScope.mainTitle = "Expenses";
	$rootScope.mainHeading = "Expenses";
	
	// Update the tab sections
	$rootScope.selectTabSection("expenses", 0);
	
	$scope.dateOptions = {
		changeMonth: true,
		changeYear: true,
		dateFormat: "dd/mm/yy"
	};

	var loadExpenses = function() {
		// Retrieve a list of expenses via REST
		$Restangular.one("expenses").getList().then(function(expenses) {
			$scope.expenses = expenses;
		});
	}

	$scope.saveExpense = function() {
		if ($scope.expensesform.$valid) {
			// Post the expense via REST
			$Restangular.one("expenses").post(null, $scope.newExpense).then(function() {
				// Reload new expenses list
				loadExpenses();
			});
		}
	};

	$scope.clearExpense = function() {
		$scope.newExpense = {};
	};

	// Initialise scope variables
	loadExpenses();
	$scope.clearExpense();
}]);

},{}],4:[function(require,module,exports){
"use strict";

/******************************************************************************************

Tasks main

******************************************************************************************/

require("./expenses-controller.js");

var app = angular.module("expenses.controllers", [
	"expenses.controller"
]);

app.config(["$routeProvider", function($routeProvider) {
	// Labour analysis routes
	$routeProvider.when("/expenses", { templateUrl: "expenses-content.html" });
	
	$routeProvider.otherwise({redirectTo: "/expenses"});
}]);

app.run(["$rootScope", function($rootScope) {
	// Add app button
	$rootScope.appSections = $rootScope.appSections || [];
	$rootScope.appSections.push({ title: "Expenses", image: "static/img/icon-generic.png", app: "expenses" });
	
	// Configure tab sections
	$rootScope.tabSections = $rootScope.tabSections || {};
	$rootScope.tabSections.expenses = [
		{ title: "Expenses", app: "expenses" }
	];
}]);

},{"./expenses-controller.js":3}],5:[function(require,module,exports){
angular.module("shared.partials",[]).run(["$templateCache",function(i){i.put("navbar-subbar.html",'<div ng-controller="ctrlSubNavigation"><div slidein="" ng-controller="ctrlSubNavigation" min-scroll="minShowOffset()" slide-speed="250" class="navigation-bar fixed-navigation-bar"><div slide-direction="up" slide-speed="250" class="navigation-container"><h1>{{mainHeading}}</h1><div class="icon-bar"><div ng-repeat="section in contentSections" ng-click="scrollToSection($index)" class="text-link clickable">{{section.text}}</div><div class="icon clickable" clicktoggle="#section-menu" hide-on="scroll,click"><i class="fa fa-bars"></i></div></div></div></div><div id="section-menu" class="section-popup"><ul><li ng-repeat="section in contentSections" ng-click="scrollToSection($index)" class="clickable">{{section.text}}</li></ul></div><div slidein="" ng-controller="ctrlSubNavigation" min-scroll="minShowOffset()" slide-direction="up" slide-speed="250" class="navigation-bar fixed-navigation-bar bottom"><div class="navigation-container"><div class="icon clickable" ng-click="scrollToTop()"><i class="icon home"></i></div></div></div></div>'),i.put("navbar.html",'<div ng-controller="ctrlNavigation" class="navigation-bar top-navigation-bar"><div class="navigation-container"><div class="icon-bar mobile"><div class="icon clickable" clicktoggle="#app-menu" hide-on="scroll,click" target-position="left"><i class="fa fa-bars"></i></div></div><div class="logo"><a click-to-window="" ng-href="#/"></a></div><h1>{{mainTitle}}</h1><div id="search-bar" class="search-bar"><div class="icon clickable"><i class="fa fa-search"></i></div><div class="search-field"><input ng-model="searchtext" placeholder="enter search text"></div></div><div class="icon-bar"><div class="icon clickable" searchbar="#search-bar"><i class="fa fa-search"></i></div><div class="icon clickable" clicktoggle="#app-menu" hide-on="scroll,click" target-position="center"><i class="fa fa-bars"></i></div><div class="icon clickable" clicktoggle="#notification-menu" hide-on="scroll,click" target-position="right"><i class="fa fa-bell"></i></div><div class="icon clickable" clicktoggle="#user-menu" hide-on="scroll,click" target-position="right"><div class="user"><i class="fa fa-circle"></i><span>SK</span></div></div></div></div><div id="app-menu" class="app-popup"><div ng-repeat="app in appSections | orderBy:[\'level\', \'title\']" class="app-icon"><a click-to-window="" ng-href="#/{{app.app}}"><img ng-src="{{app.image}}"><span>{{app.title}}</span></a></div></div><div id="notification-menu" class="app-popup text-list"><ul><li>4 Notifications</li><li class="seperator"></li><li><span class="index">1</span><span class="notification">Jack Torrance has begun writing a lengthy novel using an old typewriter</span><i class="fa fa-chevron-right"></i></li><li><span class="index">2</span><span class="notification">Danny Torrance has been riding his tricycle around the hotel</span><i class="fa fa-chevron-right"></i></li><li><span class="index">3</span><span class="notification">Jack Torrance has had a vision at the bar in the ballroom</span><i class="fa fa-chevron-right"></i></li><li><span class="index">4</span><span class="notification">Jack Torrance has purchased a nice shiny axe and is using catch phrases from a TV show</span><i class="fa fa-chevron-right"></i></li></ul></div><div id="user-menu" class="app-popup text-list"><ul><li>Stanley Kubrick<span class="email">stanley.kubrick@gmail.com</span></li><li class="seperator"></li><li>Account</li><li>Setting</li><li class="seperator"></li><li>Sign out</li></ul></div></div>'),i.put("tab-header.html",'<div ng-controller="ctrlViewNavigation" class="tab-bar"><ul><li ng-repeat="tab in currentSection" class="text-link clickable" ng-click="changeTabView($index)" ng-class="tab.active? \'current\' : \'\'"><a ng-href="#/{{tab.app}}">{{tab.title}}</a></li></ul></div>'),i.put("version-content.html",'<div ng-controller="ctrlVersion"><h2>Version</h2><div class="table-holder centered"><div class="filter-container"><div class="date"><label>Application:</label> {{ config.version }}</div><div class="date"><label>Angular.js:</label> {{ config.angular }}</div><div class="date"><label>Build date:</label> {{ config.builddate | date:\'dd/mm/yy hh:mm\' }}</div></div></div><div bookmarklist="" id="bookmarks" class="section-list"></div></div>')}]);
},{}],6:[function(require,module,exports){
/******************************************************************************************

Angular Directives for resizing controls

******************************************************************************************/

var app = angular.module("resize.directives", []);

// The auto-resize-form watches models for changes and resizes content to fit, usually used where a textarea exists
// Usage: <div auto-resize-form resize-watches="comment,someFunc()" resize-sources="textarea,button"></div>
//	this will watch $scope.comment and $scope.someFunc() then resize the div to fit using the heights of all textarea and button elements
// NB: textareas should have ngTrim set to false
app.directive("autoResizeForm", ["$timeout", function($timeout) {
	var link = function($scope, element, attrs, ngModel) {
		if (!attrs.resizeWatches)
			return console.log("Nothing for auto-resize-form to watch :(");
		
		var resizeWatches = (attrs.resizeWatches || "comment").split(",");
		var resizeSources = (attrs.resizeSources || "textarea").split(",");
		var minAreaHeight = 10;
		var timerShrinkTextAreas = null;
		
		var resizeElements = function(newValue, oldValue) {
			// If its a string that has changed, it could be the textarea, which may need shrinking
			if ((typeof(newValue) == "string") && (typeof(oldValue) == "string")) {
				if (newValue.length < oldValue.length) {
					if (timerShrinkTextAreas)
						$timeout.cancel(timerShrinkTextAreas);
					
					timerShrinkTextAreas = $timeout(function() {
						timerShrinkTextAreas = null;

						angular.forEach(resizeSources, function(value, key) {
							if (value.prop("tagName") == "TEXTAREA") {
								value.height(minAreaHeight);
								value.height(value.prop("scrollHeight") - (value.outerHeight() - value.height()));
							}
						});
					}, 500);
				}
			}

			// This ensures elements are updated and DOM should be up to date
			$timeout(function() {
				var newHeight = 0;
				
				angular.forEach(resizeSources, function(value, key) {
					if (value.prop("tagName") == "TEXTAREA") {
						var areaOldHeight = value.height();
						var areaScrollHeight = value.prop("scrollHeight");
						var areaNewHeight = areaScrollHeight - (value.outerHeight() - areaOldHeight);

						newHeight += areaScrollHeight;
						
						if (areaOldHeight != areaNewHeight)
							value.height(areaNewHeight);
					}
					else {
						newHeight += value.outerHeight();
					}
				});
				
				element.stop();
				if (newHeight < element.height())
					element.animate({ height: newHeight });
				else
					element.height(newHeight);
			}, 0);
		};
		
		angular.forEach(resizeWatches, function(value, key) {
			$scope.$watch(value, resizeElements);
		});
		
		angular.forEach(resizeSources, function(value, key) {
			resizeSources[key] = element.find(value);
			if (resizeSources[key].prop("tagName") == "TEXTAREA")
				minAreaHeight = resizeSources[key].height();
		});
	};

	return {
		restrict: "A",
		link: link
	};
}] );

},{}],7:[function(require,module,exports){
"use strict";

/******************************************************************************************

Version controller

******************************************************************************************/

var app = angular.module("version.controller", ["ngRoute"]);

// The version controller
app.controller("ctrlVersion", ["$rootScope", "$scope", function VersionCtrl($rootScope, $scope) {
	// Update the headings
	$rootScope.mainTitle = "About this web application";
	$rootScope.mainHeading = "About this web application";
	
	if (!$rootScope.tabSections.version) {
		$rootScope.tabSections.version = [
			{ title: "Version", app: "version" }
		];
	}
	
	// Update the tab sections
	$rootScope.selectTabSection("version", 0);
	
	console.log(angular.version, angular.version.full);
	console.log($rootScope.config.version);
	console.log($rootScope.config.builddate);
}]);

},{}],8:[function(require,module,exports){
"use strict";

/******************************************************************************************

Navigation controllers

******************************************************************************************/

var app = angular.module("navigation.controllers", ["ngRoute"]);

// The main navigation menu appears at the top of the page and generally carries non-page specific links
app.controller("ctrlNavigation", ["$rootScope", "$scope", "$location", function NavigationCtrl($rootScope, $scope, $location) {
	$scope.searching = false;
	$scope.searchtext = "";

	$scope.clickShowSearch = function() {
		$scope.searching = true;
		$scope.oldTitle = $rootScope.mainTitle;
		$rootScope.mainTitle = "Search";
	};
	
	$scope.clickHideSearch = function() {
		$scope.searching = false;
		$rootScope.mainTitle = $scope.oldTitle;
	};
}]);


// The sub navigation menu appears when a page has scrolled down beyond the main menu
app.controller("ctrlSubNavigation", ["$rootScope", "$scope", "$timeout", function SubNavigationCtrl($rootScope, $scope, $timeout) {
	// Rebuild the bookmark section links
	var updateBookmarks = function() {
		// Shift this to the next digest so we know the DOM is loaded
		$timeout(function() {
			$rootScope.contentSections = [];
			
			angular.forEach(angular.element("#content > ng-view").last().children("div").children("h3"), function(value, key) {
				var $this = angular.element(value);
				
				$rootScope.contentSections.push({ text: $this.text().replace(/\([^)]*\)/g, ""), element: $this });
			});
		}, 0);
	};

	$rootScope.$on("$viewContentLoaded", updateBookmarks);
	$scope.$on("navigation-updatelinks", updateBookmarks);

	// Scroll to the top of the page
	$scope.scrollToTop = function(index) {
		angular.element("body, html").animate({ scrollTop: 0 }, 500);
	};
	
	// Scroll to a specific page section
	$scope.scrollToSection = function(index) {
		angular.element("body, html").animate({ scrollTop: $rootScope.contentSections[index].element.offset().top - angular.element(".top-navigation-bar").outerHeight() - 20 }, 500);
	};
	
	// Return the bottom of the section list bookmarks
	$scope.minShowOffset = function() {
		var bookmarkElement = angular.element("#bookmarks");
		
		if (!bookmarkElement.length)
			bookmarkElement = angular.element("#content");

		return bookmarkElement.height() + bookmarkElement.offset().top;
	};
}]);

// The tab navigation menu appears near the top of the page and generally carries page specific links
app.controller("ctrlViewNavigation", ["$rootScope", "$scope", "$location", function ViewNavigationCtrl($rootScope, $scope, $location) {
	// Change main content app
	$scope.changeTabView = function(index) {
		if ($rootScope.currentSection[index].app) {
			$location.path("/" + $rootScope.currentSection[index].app);
		}
	};
}]);

},{}],9:[function(require,module,exports){
/******************************************************************************************

Angular Directives for the navigation app

******************************************************************************************/

var app = angular.module("navigation.directives", []);

// The bookmarklist directive adds a clickable bookmark list to an element
// Usage: <div bookmarklist></div>
//	this will fill the list with an unordered list of clickable bookmark elements taken from any h3's directly decended from the content container
app.directive("bookmarklist", ["$compile", function($compile) {
	var link = function($scope, element, attrs, ngModel) {
		var contentList = angular.element("<ul></ul>");
		var contentSections = [];
		var searchContainer = angular.element("#content > ng-view").last().children("div");
		
		// Scroll to a specific page section
		$scope.scrollToSection = function(index) {
			angular.element("body, html").animate({ scrollTop: contentSections[index].element.offset().top - angular.element(".top-navigation-bar").outerHeight() - 20 }, 500);
		};

		// Build the section list
		var buildSectionList = function() {
			contentList.empty();
			contentSections = [];

			angular.forEach(searchContainer.children("h3"), function(value, key) {
				var $this = angular.element(value);
				var listItem = angular.element("<li class='clickable' ng-click='scrollToSection(" + contentSections.length + ")'>" + $this.text().replace(/\([^)]*\)/g, "") + "</li>");
				
				contentList.append(listItem);
				contentSections.push({ text: $this.text(), element: $this });
			});
		};
		
		$scope.$on("navigation-updatelinks", buildSectionList);
		buildSectionList();
		
		// Add the list to the DOM
		$compile(contentList.contents())($scope);
		element.append(contentList);
	};

	return {
		restrict: "A",
		link: link
	};
}] );


// The searchbar directive shows and hides the search box
// Usage: <div class="icon clickable" searchbar="#search-bar"><i class="fa fa-search"></i></div>
//	this would show and hide the search bar when clicking this element
app.directive("searchbar", ["$timeout", function($timeout) {
	var getSearchWidth = function(searchBar) {
		var heading = angular.element(".top-navigation-bar > .navigation-container h1");

		return angular.element(".top-navigation-bar > .navigation-container").outerWidth()
			/*- angular.element(".top-navigation-bar > .navigation-container .logo").outerWidth()
			- parseInt(angular.element(".top-navigation-bar > .navigation-container .logo").css("marginRight"), 10)*/
			- heading.outerWidth()
			- parseInt(heading.css("marginLeft"), 10)
			- parseInt(heading.css("marginRight"), 10)
			- parseInt(searchBar.css("right"), 10);
	};

	var link = function($scope, element, attrs) {
		var $window = angular.element(window);
		var searchBar = angular.element(attrs.searchbar || "#search-bar");
		var searchButton = element;
		var searchHideButton = searchBar.find(".icon");
		var mainLogo = angular.element(".top-navigation-bar div.logo");
		var mainLogoWidth = parseInt(mainLogo.css("width"), 10);
		
		var showSearchBar = function() {
			searchButton.hide();
			searchBar.show();
			
			$timeout(function() {
				$scope.mainTitle = "Search";
				
				$timeout(function() {
					mainLogo.animate({ width: 0 }, 500, "linear");
					searchBar.animate({ width: getSearchWidth(searchBar) }, 500, "linear", function() {
						searchBar.find("input").focus();
					});
				}, 0);
			}, 0);
		};
		
		var hideSearchBar = function() {
			searchBar.find("input").blur();
			searchBar.animate({ width: 42 }, 500, "linear", function() {
				searchBar.fadeOut();
				searchButton.show();
			});
			mainLogo.animate({ width: mainLogoWidth }, 500, "linear");
			
			$timeout(function() {
				delete $scope.mainTitle;
			}, 0);
		};
		
		searchButton.click(function(event) {
			event.preventDefault();
			event.stopPropagation();
			
			showSearchBar();
		});
		
		searchBar.click(function(event) {
			event.preventDefault();
			event.stopPropagation();
		});
		
		searchHideButton.click(function(event) {
			event.preventDefault();
			event.stopPropagation();

			hideSearchBar();
		});
		
		$window.resize(function() {
			searchBar.css({ width: getSearchWidth(searchBar) });
		});
		
		$window.click(function() {
			hideSearchBar();
		});
	};

	return {
		restrict: "A",
		link: link
	};
}]);

},{}]},{},[2]);

//# sourceMappingURL=../maps/codingtest.min.js.map